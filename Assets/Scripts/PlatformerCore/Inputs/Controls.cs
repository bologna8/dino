//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlatformerCore/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Base"",
            ""id"": ""d49951ab-cce2-4a3b-a492-030a27aa89ee"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0306f22b-89cc-4501-9ca6-85745f13b3ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b62cc979-cb46-4546-8ac8-6fae34099c32"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""Value"",
                    ""id"": ""c8306e7e-5d75-46cf-a437-06d173d0140a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""051e7c66-e7a9-45e4-adbb-0b65d4e2a3c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""4da1f159-f940-4f69-a314-af1dc9518f89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""779fa3b6-e519-4598-9f65-be29c9d38171"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""27980170-e8e9-44eb-8caa-0f475919c991"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ee1aa8f-2bc6-4805-a86c-7ffd384cece4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbe3f575-67fa-4b9f-919b-cd78773542e3"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""fcc7252d-bbea-450c-921d-ef4ac7a2027b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7a7d1744-2670-4022-939e-c6d34b311e62"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e0ec2215-7fba-4d8d-ae48-e0b7c9123223"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""f55b79f7-7204-4f25-931e-043f197f3232"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a56db15e-d79b-4364-b91c-f03819ff9292"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""66839936-4db7-4ab5-a867-f469673ddf0f"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""4cd91e24-788a-48bc-a2c5-d79b33be73aa"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f0816731-db4b-4adf-82b0-be0461812bbc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""35688b47-751b-4308-a7f4-5d180aff0814"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""b4e776f7-6e2e-491d-8789-e90674fb4e3f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b3ce7ec0-94da-477a-9ea8-b898606f4ef5"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""49f43e29-d06c-47de-aa97-e45ca903adbe"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6dce6364-335c-48f0-a04d-35c4ddff7a5d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0c52d3c-a737-4d5f-ba95-44980b7422cb"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a059677a-aa46-4a5b-9f79-eed43aab346f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""302d29b3-00d8-4d76-ab44-abcdbc692a1a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd179e56-c410-4da6-a2a5-431e995c9b86"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7396ee16-3d9c-4cb7-b827-6522406ec71f"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f5acb20-470a-4d5f-bd79-22dfddb0f4ae"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71020957-cb51-4633-9836-3e09df2600e4"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DialogueControls"",
            ""id"": ""ea9b40c7-60b8-4914-b4bd-8c9d8cde967e"",
            ""actions"": [
                {
                    ""name"": ""LeaveDialogue"",
                    ""type"": ""Button"",
                    ""id"": ""ffd3778a-5464-4ac3-a12a-96660a953c2e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f882381-60ab-4a31-9d6a-0a60ae9614c3"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeaveDialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Aiming"",
            ""id"": ""bad2ff60-61f4-4dcd-873f-d7aa3ad393bb"",
            ""actions"": [
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""af13261c-9637-47ff-beda-c4213f7394d0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ControllerStick"",
                    ""type"": ""Value"",
                    ""id"": ""96f9b8cd-2eda-453d-9982-6eeb0d104989"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AimButton"",
                    ""type"": ""Button"",
                    ""id"": ""498dab97-725c-49e6-830c-f8b8129a7ae1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7cdf8252-2c95-4f2d-84d6-875b29eaed5d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d10df748-f272-4c91-904b-4be23507178f"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllerStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""b816cef8-b676-4985-8013-47e6c0e3475e"",
            ""actions"": [
                {
                    ""name"": ""NextPage"",
                    ""type"": ""Button"",
                    ""id"": ""40f8159f-3e0a-43c4-990a-e94922f80cea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousPage"",
                    ""type"": ""Button"",
                    ""id"": ""83e99321-d211-4e25-be9b-5bd439a3b675"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""0340a07b-b1b1-4305-8e72-0cddf3f071ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c1aa813f-c46b-450f-9d30-83415e133434"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c5fcc7c-a2e9-4533-88ed-772655608f7d"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62578fe5-83fb-43db-bebb-be77d80cbcf3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e6eb266-17bd-4a67-b97c-119484ad738a"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d36424f8-edc1-4c10-8fc4-fc3237364669"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1f1af07-2094-43d1-81f3-b7dbff884a02"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Base
        m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
        m_Base_Jump = m_Base.FindAction("Jump", throwIfNotFound: true);
        m_Base_Move = m_Base.FindAction("Move", throwIfNotFound: true);
        m_Base_Vertical = m_Base.FindAction("Vertical", throwIfNotFound: true);
        m_Base_Dash = m_Base.FindAction("Dash", throwIfNotFound: true);
        m_Base_Primary = m_Base.FindAction("Primary", throwIfNotFound: true);
        m_Base_Secondary = m_Base.FindAction("Secondary", throwIfNotFound: true);
        m_Base_PauseGame = m_Base.FindAction("PauseGame", throwIfNotFound: true);
        // DialogueControls
        m_DialogueControls = asset.FindActionMap("DialogueControls", throwIfNotFound: true);
        m_DialogueControls_LeaveDialogue = m_DialogueControls.FindAction("LeaveDialogue", throwIfNotFound: true);
        // Aiming
        m_Aiming = asset.FindActionMap("Aiming", throwIfNotFound: true);
        m_Aiming_MouseMove = m_Aiming.FindAction("MouseMove", throwIfNotFound: true);
        m_Aiming_ControllerStick = m_Aiming.FindAction("ControllerStick", throwIfNotFound: true);
        m_Aiming_AimButton = m_Aiming.FindAction("AimButton", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_NextPage = m_UI.FindAction("NextPage", throwIfNotFound: true);
        m_UI_PreviousPage = m_UI.FindAction("PreviousPage", throwIfNotFound: true);
        m_UI_OpenInventory = m_UI.FindAction("OpenInventory", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Base
    private readonly InputActionMap m_Base;
    private List<IBaseActions> m_BaseActionsCallbackInterfaces = new List<IBaseActions>();
    private readonly InputAction m_Base_Jump;
    private readonly InputAction m_Base_Move;
    private readonly InputAction m_Base_Vertical;
    private readonly InputAction m_Base_Dash;
    private readonly InputAction m_Base_Primary;
    private readonly InputAction m_Base_Secondary;
    private readonly InputAction m_Base_PauseGame;
    public struct BaseActions
    {
        private @Controls m_Wrapper;
        public BaseActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Base_Jump;
        public InputAction @Move => m_Wrapper.m_Base_Move;
        public InputAction @Vertical => m_Wrapper.m_Base_Vertical;
        public InputAction @Dash => m_Wrapper.m_Base_Dash;
        public InputAction @Primary => m_Wrapper.m_Base_Primary;
        public InputAction @Secondary => m_Wrapper.m_Base_Secondary;
        public InputAction @PauseGame => m_Wrapper.m_Base_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_Base; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
        public void AddCallbacks(IBaseActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Vertical.started += instance.OnVertical;
            @Vertical.performed += instance.OnVertical;
            @Vertical.canceled += instance.OnVertical;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Primary.started += instance.OnPrimary;
            @Primary.performed += instance.OnPrimary;
            @Primary.canceled += instance.OnPrimary;
            @Secondary.started += instance.OnSecondary;
            @Secondary.performed += instance.OnSecondary;
            @Secondary.canceled += instance.OnSecondary;
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
        }

        private void UnregisterCallbacks(IBaseActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Vertical.started -= instance.OnVertical;
            @Vertical.performed -= instance.OnVertical;
            @Vertical.canceled -= instance.OnVertical;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Primary.started -= instance.OnPrimary;
            @Primary.performed -= instance.OnPrimary;
            @Primary.canceled -= instance.OnPrimary;
            @Secondary.started -= instance.OnSecondary;
            @Secondary.performed -= instance.OnSecondary;
            @Secondary.canceled -= instance.OnSecondary;
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
        }

        public void RemoveCallbacks(IBaseActions instance)
        {
            if (m_Wrapper.m_BaseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseActions @Base => new BaseActions(this);

    // DialogueControls
    private readonly InputActionMap m_DialogueControls;
    private List<IDialogueControlsActions> m_DialogueControlsActionsCallbackInterfaces = new List<IDialogueControlsActions>();
    private readonly InputAction m_DialogueControls_LeaveDialogue;
    public struct DialogueControlsActions
    {
        private @Controls m_Wrapper;
        public DialogueControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeaveDialogue => m_Wrapper.m_DialogueControls_LeaveDialogue;
        public InputActionMap Get() { return m_Wrapper.m_DialogueControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueControlsActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueControlsActionsCallbackInterfaces.Add(instance);
            @LeaveDialogue.started += instance.OnLeaveDialogue;
            @LeaveDialogue.performed += instance.OnLeaveDialogue;
            @LeaveDialogue.canceled += instance.OnLeaveDialogue;
        }

        private void UnregisterCallbacks(IDialogueControlsActions instance)
        {
            @LeaveDialogue.started -= instance.OnLeaveDialogue;
            @LeaveDialogue.performed -= instance.OnLeaveDialogue;
            @LeaveDialogue.canceled -= instance.OnLeaveDialogue;
        }

        public void RemoveCallbacks(IDialogueControlsActions instance)
        {
            if (m_Wrapper.m_DialogueControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueControlsActions @DialogueControls => new DialogueControlsActions(this);

    // Aiming
    private readonly InputActionMap m_Aiming;
    private List<IAimingActions> m_AimingActionsCallbackInterfaces = new List<IAimingActions>();
    private readonly InputAction m_Aiming_MouseMove;
    private readonly InputAction m_Aiming_ControllerStick;
    private readonly InputAction m_Aiming_AimButton;
    public struct AimingActions
    {
        private @Controls m_Wrapper;
        public AimingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMove => m_Wrapper.m_Aiming_MouseMove;
        public InputAction @ControllerStick => m_Wrapper.m_Aiming_ControllerStick;
        public InputAction @AimButton => m_Wrapper.m_Aiming_AimButton;
        public InputActionMap Get() { return m_Wrapper.m_Aiming; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AimingActions set) { return set.Get(); }
        public void AddCallbacks(IAimingActions instance)
        {
            if (instance == null || m_Wrapper.m_AimingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AimingActionsCallbackInterfaces.Add(instance);
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
            @ControllerStick.started += instance.OnControllerStick;
            @ControllerStick.performed += instance.OnControllerStick;
            @ControllerStick.canceled += instance.OnControllerStick;
            @AimButton.started += instance.OnAimButton;
            @AimButton.performed += instance.OnAimButton;
            @AimButton.canceled += instance.OnAimButton;
        }

        private void UnregisterCallbacks(IAimingActions instance)
        {
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
            @ControllerStick.started -= instance.OnControllerStick;
            @ControllerStick.performed -= instance.OnControllerStick;
            @ControllerStick.canceled -= instance.OnControllerStick;
            @AimButton.started -= instance.OnAimButton;
            @AimButton.performed -= instance.OnAimButton;
            @AimButton.canceled -= instance.OnAimButton;
        }

        public void RemoveCallbacks(IAimingActions instance)
        {
            if (m_Wrapper.m_AimingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAimingActions instance)
        {
            foreach (var item in m_Wrapper.m_AimingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AimingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AimingActions @Aiming => new AimingActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_NextPage;
    private readonly InputAction m_UI_PreviousPage;
    private readonly InputAction m_UI_OpenInventory;
    public struct UIActions
    {
        private @Controls m_Wrapper;
        public UIActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextPage => m_Wrapper.m_UI_NextPage;
        public InputAction @PreviousPage => m_Wrapper.m_UI_PreviousPage;
        public InputAction @OpenInventory => m_Wrapper.m_UI_OpenInventory;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @NextPage.started += instance.OnNextPage;
            @NextPage.performed += instance.OnNextPage;
            @NextPage.canceled += instance.OnNextPage;
            @PreviousPage.started += instance.OnPreviousPage;
            @PreviousPage.performed += instance.OnPreviousPage;
            @PreviousPage.canceled += instance.OnPreviousPage;
            @OpenInventory.started += instance.OnOpenInventory;
            @OpenInventory.performed += instance.OnOpenInventory;
            @OpenInventory.canceled += instance.OnOpenInventory;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @NextPage.started -= instance.OnNextPage;
            @NextPage.performed -= instance.OnNextPage;
            @NextPage.canceled -= instance.OnNextPage;
            @PreviousPage.started -= instance.OnPreviousPage;
            @PreviousPage.performed -= instance.OnPreviousPage;
            @PreviousPage.canceled -= instance.OnPreviousPage;
            @OpenInventory.started -= instance.OnOpenInventory;
            @OpenInventory.performed -= instance.OnOpenInventory;
            @OpenInventory.canceled -= instance.OnOpenInventory;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IBaseActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnVertical(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnPrimary(InputAction.CallbackContext context);
        void OnSecondary(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
    public interface IDialogueControlsActions
    {
        void OnLeaveDialogue(InputAction.CallbackContext context);
    }
    public interface IAimingActions
    {
        void OnMouseMove(InputAction.CallbackContext context);
        void OnControllerStick(InputAction.CallbackContext context);
        void OnAimButton(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNextPage(InputAction.CallbackContext context);
        void OnPreviousPage(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
    }
}
